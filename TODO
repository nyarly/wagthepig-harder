* Fork and strip for future projects
  * Consider moving SMTP stuff into mattak - used now just for auth
  * Likewise sqlxmq
  * Break out axum_spa crate - useful outside of semweb stuff
  * How to strip Elm/frontend work?

WTP parity:

F/E
* Error handling - ideas
  * Highlight/jump to issue
  * Message near interaction (submit turns red)

* Proxy for BGG? Images especially seem like a place we might be neighborly

== Future work

=== Frontend

* Rust based diecut for frontend splat
* FE condreq support
* At what level should we cache link walking? Browser should do some of it,
  especially if we set short TTLs on API responses, and that'll be reliable and easy.
  We _could_ do some in-app caching as we walk, and control that on a per-page level
* General view "perspectives" - including multiuse queries
* Halogen/Purescript FE?
* relationship between nick (= B/E Locator) and routes
* Pact for tests?
* investigate elm-concurrent-task (enables JSON-LD and Biscuits in Elm)
* asset fingerprinting; seems like will require a bundler
* Client-side JSON-LD
  - flatten/expand responses
  - validate `expect`
  - in general decouple from exact B/E format
* Biscuit WASM port for Elm e.g.
  - check if my ip = requesting ip
  - check if time is in the next 60 seconds
* Sophisticated 409 handling in F/E for conditional updates
  (automatic 3-way merge)
* add JSON-LD tooling - at least validate our API

=== Backend
* Pre compress frontend assets in prod deploy?

* Consider further enforcing DB logic in types - DBIds are per-row-type, but currently
  Event<GameId> would work :/
* Middleware for conditional requests
  * If-Match & If-None-Match - check cache, and short circuit
  * If-Match & If-None-Match - check response/generated and empty bodies
* actually write a JSON-LD @context
* multipart emails with HTML and images for password resets and whatnot
