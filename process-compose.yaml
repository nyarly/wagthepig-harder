vars:
  projectname: wagthepig
  smtp_host: 127.0.0.1
  smtp_port: 1025
  smtp_cert: devsupport/tls/smtp/cert.crt
  smtp_key: devsupport/tls/smtp/cert.key
environment:
  - PGDATA=devsupport/db
  - CANON_DOMAIN=localhost:3000
  - SMTP_HOST=127.0.0.1
  - SMTP_PORT=1025
  # not to secure STMP,
  # just to ensure smtp auth tested during dev
  - SMTP_USERNAME=smtp_user
  - SMTP_PASSWORD=smtp_password
  - "MP_UI_BIND_ADDR=127.0.0.1:8025"
  - "MP_SMTP_BIND_ADDR=127.0.0.1:1025"
  - ADMIN_EMAIL=nobody@nowhere.org
  - SMTP_CERT=../devsupport/tls/smtp/cert.crt

unifiedbackend: &unifiedbackend
  live-elm-make:
    working_dir: frontend/src/
    command: watchexec -w elm/ elm make elm/Main.elm --output=../dist/js/main.js --debug
  mailpit:
    command: mailpit --smtp-auth-file=devsupport/mailpit_passwords --smtp-tls-cert {{.smtp_cert}} --smtp-tls-key {{.smtp_key}}
    ready_log_line: "accessible via http"
  database:
    command: devsupport/run_postgres.sh
    ready_log_line: "ready to accept connections"
    shutdown:
      signal: 2 # SIGINT kills live clients and shuts down
  database_setup:
    command: devsupport/setup_postgres.sh
    depends_on:
      database:
        condition: process_log_ready
  backend:
    environment:
    - RUST_LOG=trace,lettre=error,sqlxmq=error,mio=error
    working_dir: backend/
    command: watchexec --no-vcs-ignore --on-busy-update restart --watch target/debug/ --filter {{.projectname}}-backend target/debug/{{.projectname}}-backend
    depends_on:
      database_setup:
        condition: process_completed_successfully
      mailpit:
        condition: process_log_ready

barefrontend: &barefrontend
  elm-live:
    working_dir: frontend/src/
    command: "elm-live elm/Main.elm --verbose --pushstate --dir ../dist/ --start-page html/index.html -- --output=../dist/js/main.js"

processes:
  # <<: *barefrontend # use this to start on just frontend
  <<: *unifiedbackend # use this once the backend is available unifiedbackend
  env-check:
    command: env | sort
  elm-tests:
    working_dir: frontend/src
    command: elm-test-rs --watch
  css-bundle:
    working_dir: frontend/
    command: "watchexec -w src/css/ lightningcss --bundle --sourcemap --output-file dist/css/index.css src/css/main.css"
  copy-assets:
    working_dir: frontend/
    command: "watchexec -w src/static/assets/ rsync -av src/static/assets/ dist/assets/"
  copy-html:
    working_dir: frontend/
    command: "watchexec -w src/static/html/ rsync -av src/static/html/ dist/html/"
  copy-ports:
    working_dir: frontend/
    command: "watchexec -w src/static/js/ports/ rsync -av src/static/js/ports dist/js/ports/"
